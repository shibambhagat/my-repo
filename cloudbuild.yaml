options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # Step 1: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build',
        '-t',
        'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}',
        '.'
      ]

  # Step 2: Push Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'push',
        'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}'
      ]

  # Debug step to check files
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Listing current directory contents:"
        pwd
        ls -la
        echo "Creating startup script..."
        cat > startup.sh << 'EOL'
        #!/bin/bash
        # Update & install Docker
        apt-get update -y
        apt-get install -y docker.io

        # Enable & start Docker
        systemctl enable docker
        systemctl start docker
        sleep 15

        # Configure Docker authentication for Artifact Registry
        gcloud auth configure-docker asia-south1-docker.pkg.dev --quiet

        # Pull latest image
        docker pull asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}

        # Stop & remove old container (if exists)
        docker stop simple-web-app || true
        docker rm simple-web-app || true

        # Run new container
        docker run -d -p 8080:8080 --name simple-web-app asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}

        # Log completion
        echo "Container deployment completed: $(date)" >> /var/log/startup-script.log
        EOL
        chmod +x startup.sh

  # Step 3: Blue-Green Deployment
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-bluegreen'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        echo "Starting blue-green deploy for ${SHORT_SHA}"
        TEMPLATE=it-${SHORT_SHA}
        GREEN_MIG=green-mig-${SHORT_SHA}

        # Create instance template
        gcloud compute instance-templates create $${TEMPLATE} \
          --metadata-from-file=startup-script=startup.sh \
          --metadata=IMAGE='asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app',IMAGE_TAG='${SHORT_SHA}' \
          --service-account='${_VM_SA}' \
          --scopes=https://www.googleapis.com/auth/cloud-platform \
          --machine-type=e2-micro

        # Create green MIG
        gcloud compute instance-groups managed create $${GREEN_MIG} \
          --base-instance-name=web-green \
          --template=$${TEMPLATE} \
          --size=${_MIG_SIZE} \
          --zone=${_ZONE}

        # Configure named ports
        gcloud compute instance-groups set-named-ports $${GREEN_MIG} \
          --named-ports=http:8080 \
          --zone=${_ZONE}

        # Add green to backend service
        gcloud compute backend-services add-backend ${_BACKEND_SERVICE} \
          --instance-group=$${GREEN_MIG} \
          --instance-group-zone=${_ZONE} \
          --global

        # Wait for health checks
        for i in {1..90}; do
          HEALTH_STATUS=$(gcloud compute backend-services get-health ${_BACKEND_SERVICE} \
            --instance-group=$${GREEN_MIG} \
            --instance-group-zone=${_ZONE} \
            --global \
            --format="value(healthStatus[].state)")
          echo "Health status: $${HEALTH_STATUS}"
          if [[ "$${HEALTH_STATUS}" == *"HEALTHY"* ]]; then
            echo "Green instances are healthy"
            break
          fi
          sleep 5
        done

        # Remove blue backend if it exists
        if [[ -n "${_BLUE_MIG}" ]]; then
          gcloud compute backend-services remove-backend ${_BACKEND_SERVICE} \
            --instance-group=${_BLUE_MIG} \
            --instance-group-zone=${_ZONE} \
            --global || true
        fi

        echo "Blue-green deployment completed for ${SHORT_SHA}"

substitutions:
  _ZONE: "asia-south1-a"
  _MIG_SIZE: "2"
  _BLUE_MIG: ""
  _BACKEND_SERVICE: ""
  _VM_SA: ""

images:
  - 'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}'
