options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # Step 1: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build',
        '-t',
        'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}',
        '.'
      ]

  # Step 2: Push Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'push',
        'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}'
      ]

  # Step 3: Create startup script
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Creating startup script..."
        cat > startup.sh << 'EOL'
        #!/bin/bash
        apt-get update -y && apt-get install -y docker.io > /dev/null 2>&1
        systemctl enable docker
        systemctl start docker
        sleep 10
        gcloud auth configure-docker asia-south1-docker.pkg.dev --quiet
        docker pull asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}
        docker stop simple-web-app || true
        docker rm simple-web-app || true
        docker run -d --restart=always -p 8080:8080 --name simple-web-app asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}
        echo "Container deployment completed: $(date)" >> /var/log/startup-script.log
        EOL
        chmod +x startup.sh

  # Step 4: Blue-Green Deployment (Corrected Logic)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-bluegreen'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        echo "Starting blue-green deploy for ${SHORT_SHA}"
        TEMPLATE=it-${SHORT_SHA}
        GREEN_MIG=green-mig-${SHORT_SHA}
        ZONE=asia-south1-a
        BACKEND_SERVICE=demo-backend

        # Find the current 'blue' MIG, if it exists.
        BLUE_MIG=$(gcloud compute instance-groups managed list --zones=$${ZONE} --format="value(name)" --filter="labels.status=blue" || true)
        
        if [[ -z "$${BLUE_MIG}" ]]; then
            echo "No 'blue' MIG found. This is the first deployment."
        fi

        echo "Creating new instance template..."
        gcloud compute instance-templates create $${TEMPLATE} \
          --metadata-from-file=startup-script=startup.sh \
          --metadata=IMAGE='asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app',IMAGE_TAG='${SHORT_SHA}' \
          --service-account='469028311605-compute@developer.gserviceaccount.com' \
          --scopes=https://www.googleapis.com/auth/cloud-platform \
          --machine-type=e2-micro \
          --image-family=debian-11 \
          --image-project=debian-cloud

        echo "Creating new MIG..."
        gcloud compute instance-groups managed create $${GREEN_MIG} \
          --base-instance-name=web-green \
          --template=$${TEMPLATE} \
          --size=2 \
          --zone=$${ZONE}

        # Add the 'green' label after creation.
        gcloud compute instance-groups managed update $${GREEN_MIG} \
          --zone=$${ZONE} \
          --labels=status=green

        echo "Configuring named ports..."
        gcloud compute instance-groups set-named-ports $${GREEN_MIG} \
          --named-ports=http:8080 \
          --zone=$${ZONE}

        # Add the new MIG to the backend service with 0% traffic.
        gcloud compute backend-services add-backend $${BACKEND_SERVICE} \
          --instance-group=$${GREEN_MIG} \
          --instance-group-zone=$${ZONE} \
          --global \
          --balancing-mode=UTILIZATION \
          --max-utilization=0.8 \
          --capacity-scaler=0.0

        echo "Waiting for new instances to become healthy..."
        # Poll the health status until both instances are HEALTHY
        for i in {1..24}; do # Wait up to 4 minutes (24 * 10 seconds)
          HEALTH_STATUS=$(gcloud compute backend-services get-health $${BACKEND_SERVICE} --global --format="value(backends[0].healthStatus[].healthState)" || true)
          echo "Health check attempt $i: $${HEALTH_STATUS}"
          
          # Count the number of HEALTHY instances
          HEALTHY_COUNT=$(echo "$${HEALTH_STATUS}" | tr ' ' '\n' | grep -c 'HEALTHY')
          
          if [[ "$${HEALTHY_COUNT}" -eq 2 ]]; then
            echo "✓ All new instances confirmed healthy."
            break
          fi
          
          echo "Not all instances healthy. Retrying in 10 seconds..."
          sleep 10
        done
        
        if [[ "$${HEALTHY_COUNT}" -ne 2 ]]; then
          echo "Error: New instances did not become healthy within the time limit. Aborting deployment."
          exit 1
        fi
        
        echo "Shifting traffic to new instances..."
        gcloud compute backend-services update-backend $${BACKEND_SERVICE} \
          --instance-group=$${GREEN_MIG} \
          --instance-group-zone=$${ZONE} \
          --global \
          --capacity-scaler=1.0

        echo "Waiting for traffic to stabilize on new MIG..."
        sleep 30

        if [[ -n "$${BLUE_MIG}" ]]; then
          echo "Draining connections from old MIG ($${BLUE_MIG})..."
          gcloud compute backend-services update-backend $${BACKEND_SERVICE} \
            --instance-group=$${BLUE_MIG} \
            --instance-group-zone=$${ZONE} \
            --global \
            --capacity-scaler=0.0

          # Remove the old MIG from the backend service immediately after draining.
          gcloud compute backend-services remove-backend $${BACKEND_SERVICE} \
            --instance-group=$${BLUE_MIG} \
            --instance-group-zone=$${ZONE} \
            --global --quiet
        fi
        
        echo "Deleting old resources..."
        if [[ -n "$${BLUE_MIG}" ]]; then
          gcloud compute instance-groups managed delete $${BLUE_MIG} --zone=$${ZONE} --quiet || true
          OLD_TEMPLATE=$(gcloud compute instance-templates list --format="value(name)" --filter="name ~ ^it-" | grep -v "$${TEMPLATE}" || true)
          gcloud compute instance-templates delete $${OLD_TEMPLATE} --quiet || true
        fi

        # Update labels on the new MIG to make it the "blue" one for the next deployment
        gcloud compute instance-groups managed update $${GREEN_MIG} \
            --zone=$${ZONE} --labels=status=blue
        
        echo "✓ Deployment completed successfully. Old resources cleaned up."

images:
  - 'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}'
