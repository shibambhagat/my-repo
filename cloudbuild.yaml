options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # Step 1: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build',
        '-t',
        'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}',
        '.'
      ]

  # Step 2: Push Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'push',
        'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}'
      ]

  # Step 3: Create startup script
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Creating startup script..."
        cat > startup.sh << 'EOL'
        #!/bin/bash
        
        # Install Docker
        apt-get update -y && apt-get install -y docker.io > /dev/null 2>&1
        systemctl enable docker
        systemctl start docker
        
        # Wait for Docker to be ready
        sleep 5
        
        # Pull and run the new Docker container, using the VM's service account for authentication
        IMAGE='asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app'
        IMAGE_TAG='${SHORT_SHA}'
        docker pull "${IMAGE}:${IMAGE_TAG}"
        
        # Stop and remove any old container gracefully
        docker stop simple-web-app || true
        docker rm simple-web-app || true
        
        # Run the new container
        docker run -d --restart=always -p 8080:8080 --name simple-web-app "${IMAGE}:${IMAGE_TAG}"
        
        echo "Container deployment completed: $(date)" >> /var/log/startup-script.log
        EOL
        chmod +x startup.sh
        
  # Step 4: Blue-Green Deployment
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-bluegreen'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        
        echo "Starting blue-green deploy for ${SHORT_SHA}"
        TEMPLATE="it-$(date +%s)"
        GREEN_MIG="green-mig-$(date +%s)"
        ZONE=asia-south1-a
        PROJECT_ID=third-octagon-465311-r5
        
        # Get the current active MIG by checking for a specific label
        BLUE_MIG=$(gcloud compute instance-groups managed list --zones=$${ZONE} --format="value(name)" --filter="labels.status=blue") || true
        
        echo "Current active MIG: $${BLUE_MIG}"
        
        echo "Creating new instance template..."
        gcloud compute instance-templates create $${TEMPLATE} \
          --metadata-from-file=startup-script=startup.sh \
          --metadata=IMAGE='asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app',IMAGE_TAG='${SHORT_SHA}' \
          --service-account='469028311605-compute@developer.gserviceaccount.com' \
          --scopes=https://www.googleapis.com/auth/cloud-platform \
          --machine-type=e2-micro \
          --image-family=debian-11 \
          --image-project=debian-cloud
        
        echo "Creating new MIG..."
        gcloud compute instance-groups managed create $${GREEN_MIG} \
          --base-instance-name=web-green \
          --template=$${TEMPLATE} \
          --size=2 \
          --zone=$${ZONE} \
          --labels=status=green
        
        echo "Configuring named ports..."
        gcloud compute instance-groups set-named-ports $${GREEN_MIG} \
          --named-ports=http:8080 \
          --zone=$${ZONE}
        
        echo "Adding new MIG to backend service with 0% traffic..."
        gcloud compute backend-services add-backend demo-backend \
          --instance-group=$${GREEN_MIG} \
          --instance-group-zone=$${ZONE} \
          --global \
          --balancing-mode=UTILIZATION \
          --max-utilization=0.8 \
          --capacity-scaler=0.0
        
        echo "Waiting for new instances to initialize and become healthy..."
        # Poll for health status
        for i in {1..24}; do  # Wait up to 4 minutes (24 * 10 seconds)
          STATUS=$(gcloud compute backend-services get-health demo-backend --global \
            --format='get(backends[0].healthStatus[].healthState)' || true)
          
          if [[ "$${STATUS}" == *"HEALTHY"* ]]; then
            echo "✓ New instances confirmed healthy."
            break
          fi
          echo "Health check attempt $i: $${STATUS}. Retrying in 10 seconds..."
          sleep 10
        done
        
        if [[ "$${STATUS}" != *"HEALTHY"* ]]; then
          echo "Error: New instances did not become healthy within the time limit."
          exit 1
        fi
        
        echo "Gradually increasing traffic to new instances..."
        gcloud compute backend-services update-backend demo-backend \
          --instance-group=$${GREEN_MIG} \
          --instance-group-zone=$${ZONE} \
          --global \
          --capacity-scaler=1.0
          
        echo "Waiting for traffic to stabilize..."
        sleep 30
          
        if [[ -n "$${BLUE_MIG}" ]]; then
          echo "Draining connections from old MIG ($${BLUE_MIG})..."
          gcloud compute backend-services update-backend demo-backend \
            --instance-group=$${BLUE_MIG} \
            --instance-group-zone=$${ZONE} \
            --global \
            --capacity-scaler=0.0
            
          echo "Waiting for connections to drain..."
          sleep 30
        
          echo "Removing old MIG from backend..."
          gcloud compute backend-services remove-backend demo-backend \
            --instance-group=$${BLUE_MIG} \
            --instance-group-zone=$${ZONE} \
            --global --quiet
        
          echo "Deleting old MIG and template..."
          gcloud compute instance-groups managed delete $${BLUE_MIG} \
            --zone=$${ZONE} --quiet
            
          OLD_TEMPLATE=$(gcloud compute instance-templates list --format="value(name)" --filter="name ~ ^it-[0-9]+" | grep -v "$${TEMPLATE}") || true
          if [[ -n "$${OLD_TEMPLATE}" ]]; then
            gcloud compute instance-templates delete $${OLD_TEMPLATE} --quiet || true
          fi
        
          # Update labels for the next deployment
          gcloud compute instance-groups managed update $${GREEN_MIG} \
            --zone=$${ZONE} --update-labels=status=blue
            
          echo "✓ Deployment completed successfully"
        fi
        
images:
  - 'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}'
