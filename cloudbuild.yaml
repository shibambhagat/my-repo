options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # Step 1: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build',
        '-t',
        'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}',
        '.'
      ]

  # Step 2: Push Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'push',
        'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}'
      ]

  # Step 3: Create startup script
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Creating startup script..."
        cat > startup.sh << 'EOL'
        #!/bin/bash
        apt-get update -y && apt-get install -y docker.io > /dev/null 2>&1
        systemctl enable docker
        systemctl start docker
        sleep 10
        gcloud auth configure-docker asia-south1-docker.pkg.dev --quiet
        docker pull asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}
        docker stop simple-web-app || true
        docker rm simple-web-app || true
        docker run -d --restart=always -p 8080:8080 --name simple-web-app asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}
        echo "Container deployment completed: $(date)" >> /var/log/startup-script.log
        EOL
        chmod +x startup.sh

  # Step 4: Blue-Green Deployment with verified cleanup
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-bluegreen'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        echo "Starting blue-green deploy for ${SHORT_SHA}"
        TEMPLATE=it-${SHORT_SHA}
        GREEN_MIG=green-mig-${SHORT_SHA}

        # Create instance template
        gcloud compute instance-templates create $${TEMPLATE} \
          --metadata-from-file=startup-script=startup.sh \
          --metadata=IMAGE='asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app',IMAGE_TAG='${SHORT_SHA}' \
          --service-account='469028311605-compute@developer.gserviceaccount.com' \
          --scopes=https://www.googleapis.com/auth/cloud-platform \
          --machine-type=e2-micro

        # Create green MIG
        gcloud compute instance-groups managed create $${GREEN_MIG} \
          --base-instance-name=web-green \
          --template=$${TEMPLATE} \
          --size=2 \
          --zone=asia-south1-a

        # Configure named ports
        gcloud compute instance-groups set-named-ports $${GREEN_MIG} \
          --named-ports=http:8080 \
          --zone=asia-south1-a

        # Add green to backend service
        gcloud compute backend-services add-backend demo-backend \
          --instance-group=$${GREEN_MIG} \
          --instance-group-zone=asia-south1-a \
          --global

        # Wait for health checks
        echo "Waiting for new instances to become healthy..."
        for i in {1..36}; do
          STATUS=$(gcloud compute backend-services get-health demo-backend --global \
            --format="get(status.healthStatus[0].healthState)")
          echo "Health check attempt $i: $${STATUS}"
          if [[ "$${STATUS}" == "HEALTHY" ]]; then
            echo "✓ New instances are healthy"
            break
          fi
          sleep 5
        done

        # Enhanced cleanup process
        echo "Starting comprehensive cleanup..."
        
        # List all MIGs except the current one
        OLD_MIGS=$(gcloud compute instance-groups managed list \
          --filter="NOT name='${GREEN_MIG}'" \
          --format="get(name)" \
          --zones=asia-south1-a) || true

        if [[ -n "$${OLD_MIGS}" ]]; then
          echo "Found old MIGs to cleanup: $${OLD_MIGS}"
          
          while IFS= read -r OLD_MIG; do
            if [[ -n "$${OLD_MIG}" ]]; then
              echo "Processing cleanup for MIG: $${OLD_MIG}"
              
              # Remove from backend service first
              gcloud compute backend-services remove-backend demo-backend \
                --instance-group=$${OLD_MIG} \
                --instance-group-zone=asia-south1-a \
                --global --quiet || true
              
              # Delete the MIG
              gcloud compute instance-groups managed delete $${OLD_MIG} \
                --zone=asia-south1-a --quiet || true
              
              # Delete corresponding template if it follows the naming pattern
              if [[ $${OLD_MIG} == green-mig-* ]]; then
                OLD_TEMPLATE="it-${OLD_MIG#green-mig-}"
                echo "Deleting template: $${OLD_TEMPLATE}"
                gcloud compute instance-templates delete $${OLD_TEMPLATE} --quiet || true
              elif [[ $${OLD_MIG} == "node-app-template-v2" ]]; then
                echo "Cleaning up node-app-template"
                gcloud compute instance-templates delete "node-app-template" --quiet || true
              fi
            fi
          done <<< "$${OLD_MIGS}"
        else
          echo "No old MIGs found for cleanup"
        fi

        echo "✓ Blue-green deployment and cleanup completed for ${SHORT_SHA}"

images:
  - 'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}'
