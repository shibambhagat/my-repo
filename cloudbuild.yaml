options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # Step 1: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build',
        '-t',
        'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}',
        '.'
      ]

  # Step 2: Push Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'push',
        'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}'
      ]

  # Step 3: Create startup script
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Creating startup script..."
        cat > startup.sh << 'EOL'
        #!/bin/bash
        apt-get update -y && apt-get install -y docker.io > /dev/null 2>&1
        systemctl enable docker
        systemctl start docker
        sleep 10
        gcloud auth configure-docker asia-south1-docker.pkg.dev --quiet
        docker pull asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}
        docker stop simple-web-app || true
        docker rm simple-web-app || true
        docker run -d --restart=always -p 8080:8080 --name simple-web-app asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}
        echo "Container deployment completed: $(date)" >> /var/log/startup-script.log
        EOL
        chmod +x startup.sh

  # Step 4: Blue-Green Deployment
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-bluegreen'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        echo "Starting blue-green deploy for ${SHORT_SHA}"
        TEMPLATE=it-${SHORT_SHA}
        GREEN_MIG=green-mig-${SHORT_SHA}
        ZONE=asia-south1-a

        # Get current active MIG
        BLUE_MIG=$(gcloud compute instance-groups managed list \
          --zones=$${ZONE} \
          --format="get(name)" | grep "green-mig-" | head -n 1) || true
        echo "Current active MIG: $${BLUE_MIG}"

        echo "Creating new instance template..."
        gcloud compute instance-templates create $${TEMPLATE} \
          --metadata-from-file=startup-script=startup.sh \
          --metadata=IMAGE='asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app',IMAGE_TAG='${SHORT_SHA}' \
          --service-account='469028311605-compute@developer.gserviceaccount.com' \
          --scopes=https://www.googleapis.com/auth/cloud-platform \
          --machine-type=e2-micro

        echo "Creating new MIG..."
        gcloud compute instance-groups managed create $${GREEN_MIG} \
          --base-instance-name=web-green \
          --template=$${TEMPLATE} \
          --size=2 \
          --zone=$${ZONE}

        echo "Configuring named ports..."
        gcloud compute instance-groups set-named-ports $${GREEN_MIG} \
          --named-ports=http:8080 \
          --zone=$${ZONE}

        echo "Adding new MIG to backend service with initial 0% traffic..."
        gcloud compute backend-services add-backend demo-backend \
          --instance-group=$${GREEN_MIG} \
          --instance-group-zone=$${ZONE} \
          --global \
          --balancing-mode=UTILIZATION \
          --max-utilization=0.8 \
          --capacity-scaler=0.0

        echo "Waiting for new instances to initialize..."
        sleep 60  # Allow instances to fully start

        echo "Gradually increasing traffic to new instances..."
        gcloud compute backend-services update-backend demo-backend \
          --instance-group=$${GREEN_MIG} \
          --instance-group-zone=$${ZONE} \
          --global \
          --capacity-scaler=0.5

        echo "Waiting for health checks..."
        for i in {1..12}; do  # 2 minute maximum wait
          STATUS=$(gcloud compute backend-services get-health demo-backend --global \
            --format='get(status.healthStatus[].healthState)' || true)
          
          echo "Health check attempt $i: $${STATUS}"
          
          if [[ "$${STATUS}" == *"HEALTHY"* ]]; then
            echo "New instances becoming healthy, waiting for stability..."
            sleep 30
            
            # Verify again after wait
            STATUS=$(gcloud compute backend-services get-health demo-backend --global \
              --format='get(status.healthStatus[].healthState)' || true)
            
            if [[ "$${STATUS}" == *"HEALTHY"* ]]; then
              echo "✓ New instances confirmed healthy"
              
              # Increase to full traffic
              gcloud compute backend-services update-backend demo-backend \
                --instance-group=$${GREEN_MIG} \
                --instance-group-zone=$${ZONE} \
                --global \
                --capacity-scaler=1.0

              sleep 30  # Allow traffic to stabilize
              
              if [[ -n "$${BLUE_MIG}" ]]; then
                echo "Draining connections from old MIG..."
                gcloud compute backend-services update-backend demo-backend \
                  --instance-group=$${BLUE_MIG} \
                  --instance-group-zone=$${ZONE} \
                  --global \
                  --capacity-scaler=0.0

                sleep 30  # Allow connections to drain

                echo "Removing old MIG from backend..."
                gcloud compute backend-services remove-backend demo-backend \
                  --instance-group=$${BLUE_MIG} \
                  --instance-group-zone=$${ZONE} \
                  --global --quiet

                echo "Deleting old MIG..."
                gcloud compute instance-groups managed delete $${BLUE_MIG} \
                  --zone=$${ZONE} --quiet

                echo "Cleaning up old template..."
                OLD_TEMPLATE="it-${BLUE_MIG#green-mig-}"
                gcloud compute instance-templates delete $${OLD_TEMPLATE} --quiet || true
              fi
              
              echo "✓ Deployment completed successfully"
              break
            fi
          fi
          sleep 10
        done

images:
  - 'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}'
