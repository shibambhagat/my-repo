options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # Step 1: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build',
        '-t',
        'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}',
        '.'
      ]

  # Step 2: Push Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'push',
        'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}'
      ]

  # Step 3: Combined Deployment & Cleanup
  # This step combines the entire blue-green deployment logic into a single robust script.
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-and-cleanup'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        
        # -------------------------
        # Dynamic Variables
        # -------------------------
        COMMIT_SHA="${SHORT_SHA}"
        TEMPLATE="it-${COMMIT_SHA}"
        MIG="mig-${COMMIT_SHA}-$(date +%s)" # Unique MIG name
        ZONE="asia-south1-a"
        BACKEND_SERVICE="demo-backend"
        
        echo "‚úÖ Creating new instance template: $TEMPLATE"
        
        # -------------------------
        # Create new instance template
        # -------------------------
        cat > startup.sh << 'EOL'
        #!/bin/bash
        apt-get update -y && apt-get install -y docker.io > /dev/null 2>&1
        systemctl enable docker
        systemctl start docker
        sleep 10
        gcloud auth configure-docker asia-south1-docker.pkg.dev --quiet
        docker pull asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}
        docker stop simple-web-app || true
        docker rm simple-web-app || true
        docker run -d --restart=always -p 8080:8080 --name simple-web-app asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}
        echo "Container deployment completed: $(date)" >> /var/log/startup-script.log
        EOL
        
        gcloud compute instance-templates create "$TEMPLATE" \
          --metadata-from-file=startup-script=startup.sh \
          --metadata=IMAGE='asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app',IMAGE_TAG='${COMMIT_SHA}' \
          --service-account='469028311605-compute@developer.gserviceaccount.com' \
          --scopes=https://www.googleapis.com/auth/cloud-platform \
          --machine-type=e2-micro \
          --image-family=debian-11 \
          --image-project=debian-cloud \
          --quiet
        
        echo "‚úÖ Creating new Managed Instance Group: $MIG"
        
        # -------------------------
        # Create new MIG
        # -------------------------
        gcloud compute instance-groups managed create "$MIG" \
          --base-instance-name="$MIG" \
          --size=2 \
          --template="$TEMPLATE" \
          --zone="$ZONE" \
          --quiet
        
        # -------------------------
        # Add named port mapping
        # -------------------------
        echo "üîß Setting named port 'http:8080' for MIG $MIG"
        gcloud compute instance-groups set-named-ports "$MIG" \
          --named-ports=http:8080 \
          --zone="$ZONE" \
          --quiet
        
        # -------------------------
        # Add new MIG to Load Balancer backend
        # -------------------------
        echo "üîÄ Attaching new MIG $MIG to backend service $BACKEND_SERVICE"
        gcloud compute backend-services add-backend "$BACKEND_SERVICE" \
          --instance-group="$MIG" \
          --instance-group-zone="$ZONE" \
          --global \
          --quiet
        
        echo "‚è≥ Waiting 30s for new instances to warm up and serve traffic..."
        sleep 30
        
        # -------------------------
        # Detach and delete all old MIGs
        # -------------------------
        echo "üóë Detaching and deleting old MIGs from LB backend..."
        attached_migs=$(gcloud compute backend-services describe "$BACKEND_SERVICE" --global --format="value(backends.group)" || true)
        
        if [[ -n "$attached_migs" ]]; then
          IFS=";" read -ra MIG_ARRAY <<< "$attached_migs"
          for m in "${MIG_ARRAY[@]}"; do
            MIG_NAME=$(basename "$m")
        
            # Skip the new MIG
            if [[ "$MIG_NAME" == "$MIG" ]]; then
              continue
            fi
        
            echo "üõë Detaching old MIG: $MIG_NAME from backend $BACKEND_SERVICE"
            set +e
            gcloud compute backend-services remove-backend "$BACKEND_SERVICE" \
              --instance-group="$MIG_NAME" \
              --instance-group-zone="$ZONE" \
              --global \
              --quiet || true
            set -e
          done
        else
          echo "No old MIGs attached to backend."
        fi
        
        # Delete all old MIGs and templates (keeping the new ones)
        echo "üóë Deleting old resources..."
        old_migs=$(gcloud compute instance-groups managed list --format="value(name)" --filter="name ~ ^mig-" | grep -v "$MIG" || true)
        if [[ -n "$old_migs" ]]; then
          gcloud compute instance-groups managed delete $old_migs --zone="$ZONE" --quiet || true
        fi
        
        old_templates=$(gcloud compute instance-templates list --format="value(name)" --filter="name ~ ^it-" | grep -v "$TEMPLATE" || true)
        if [[ -n "$old_templates" ]]; then
          gcloud compute instance-templates delete $old_templates --quiet || true
        fi
        
        echo "‚úÖ Deployment completed successfully with zero downtime."

images:
  - 'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}'
