steps:
  # Step 1: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build',
        '-t',
        '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/artifact-repo/${_APP_NAME}:${SHORT_SHA}',
        '.'
      ]

  # Step 2: Push Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'push',
        '${_REGION}-docker.pkg.dev/${_PROJECT_ID}/artifact-repo/${_APP_NAME}:${SHORT_SHA}'
      ]

  # Step 3: Create startup script for the instance template
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Creating startup script..."
        cat > startup.sh << EOL
        #!/bin/bash
        
        # Install Docker
        apt-get update -y && apt-get install -y docker.io > /dev/null 2>&1
        systemctl enable docker
        systemctl start docker
        
        # Wait for Docker to be ready
        sleep 5
        
        # Pull and run the new Docker container using the instance's service account
        IMAGE_PATH="${_REGION}-docker.pkg.dev/${_PROJECT_ID}/artifact-repo/${_APP_NAME}"
        IMAGE_TAG="${SHORT_SHA}"
        docker pull "${IMAGE_PATH}:${IMAGE_TAG}"
        
        # Stop and remove any old container gracefully
        docker stop ${_APP_NAME} || true
        docker rm ${_APP_NAME} || true
        
        # Run the new container
        docker run -d --restart=always -p 8080:8080 --name ${_APP_NAME} "${IMAGE_PATH}:${IMAGE_TAG}"
        
        echo "Container deployment completed: \$(date)" >> /var/log/startup-script.log
        EOL
        chmod +x startup.sh

  # Step 4: Blue-Green Deployment using MIGs
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-bluegreen'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        
        echo "Starting blue-green deploy for ${SHORT_SHA}"
        TEMPLATE_NAME="it-green-${SHORT_SHA}"
        GREEN_MIG_NAME="green-mig-${SHORT_SHA}"
        
        # Get the current active (blue) MIG by checking for a specific label
        BLUE_MIG_NAME=$(gcloud compute instance-groups managed list \
          --zones=${_ZONE} \
          --format="value(name)" \
          --filter="labels.status=blue" || true)
        
        echo "Current active MIG: ${BLUE_MIG_NAME}"
        
        echo "Creating new instance template..."
        gcloud compute instance-templates create ${TEMPLATE_NAME} \
          --metadata-from-file=startup-script=startup.sh \
          --service-account="${_SERVICE_ACCOUNT}" \
          --scopes=https://www.googleapis.com/auth/cloud-platform \
          --machine-type=${_MACHINE_TYPE} \
          --image-family=debian-11 \
          --image-project=debian-cloud
        
        echo "Creating new MIG..."
        gcloud compute instance-groups managed create ${GREEN_MIG_NAME} \
          --base-instance-name=web-green \
          --template=${TEMPLATE_NAME} \
          --size=2 \
          --zone=${_ZONE} \
          --labels=status=green
        
        echo "Configuring named ports..."
        gcloud compute instance-groups set-named-ports ${GREEN_MIG_NAME} \
          --named-ports=http:8080 \
          --zone=${_ZONE}
        
        echo "Adding new MIG to backend service with 0% traffic..."
        gcloud compute backend-services add-backend ${_BACKEND_SERVICE_NAME} \
          --instance-group=${GREEN_MIG_NAME} \
          --instance-group-zone=${_ZONE} \
          --global \
          --balancing-mode=UTILIZATION \
          --max-utilization=0.8 \
          --capacity-scaler=0.0
        
        echo "Waiting for new instances to become healthy..."
        for i in {1..24}; do
          STATUS=$(gcloud compute backend-services get-health ${_BACKEND_SERVICE_NAME} --global \
            --format='get(backends[0].healthStatus[].healthState)' || true)
          
          if [[ "$${STATUS}" == *"HEALTHY"* ]]; then
            echo "✓ New instances confirmed healthy."
            break
          fi
          echo "Health check attempt $i: ${STATUS}. Retrying in 10 seconds..."
          sleep 10
        done
        
        if [[ "$${STATUS}" != *"HEALTHY"* ]]; then
          echo "Error: New instances did not become healthy within the time limit."
          exit 1
        fi
        
        echo "Increasing traffic to new instances..."
        gcloud compute backend-services update-backend ${_BACKEND_SERVICE_NAME} \
          --instance-group=${GREEN_MIG_NAME} \
          --instance-group-zone=${_ZONE} \
          --global \
          --capacity-scaler=1.0
          
        echo "Waiting for traffic to stabilize..."
        sleep 30
          
        if [[ -n "${BLUE_MIG_NAME}" ]]; then
          echo "Draining connections from old MIG (${BLUE_MIG_NAME})..."
          gcloud compute backend-services update-backend ${_BACKEND_SERVICE_NAME} \
            --instance-group=${BLUE_MIG_NAME} \
            --instance-group-zone=${_ZONE} \
            --global \
            --capacity-scaler=0.0
            
          echo "Waiting for connections to drain..."
          sleep 30
        
          echo "Removing old MIG from backend..."
          gcloud compute backend-services remove-backend ${_BACKEND_SERVICE_NAME} \
            --instance-group=${BLUE_MIG_NAME} \
            --instance-group-zone=${_ZONE} \
            --global --quiet
        
          echo "Deleting old MIG..."
          gcloud compute instance-groups managed delete ${BLUE_MIG_NAME} \
            --zone=${_ZONE} --quiet
            
          echo "Cleaning up old template..."
          OLD_TEMPLATE_NAME=$(gcloud compute instance-templates list --format="value(name)" --filter="name ~ ^it-green-" | grep -v "${TEMPLATE_NAME}" || true)
          if [[ -n "${OLD_TEMPLATE_NAME}" ]]; then
            gcloud compute instance-templates delete ${OLD_TEMPLATE_NAME} --quiet || true
          fi
        
          # Update labels for the new MIG to be the 'blue' one for the next deployment
          gcloud compute instance-groups managed update ${GREEN_MIG_NAME} \
            --zone=${_ZONE} \
            --update-labels=status=blue
        fi
        
        echo "✓ Deployment completed successfully"
        
# --- You must define these custom variables for the pipeline to work correctly ---
substitutions:
  _PROJECT_ID: 'third-octagon-465311-r5'
  _REGION: 'asia-south1'
  _ZONE: 'asia-south1-a'
  _APP_NAME: 'simple-web-app'
  _BACKEND_SERVICE_NAME: 'demo-backend'
  _MACHINE_TYPE: 'e2-micro'
  _SERVICE_ACCOUNT: '469028311605-compute@developer.gserviceaccount.com'
