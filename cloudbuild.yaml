options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # Step 1: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build',
        '-t',
        'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}',
        '.'
      ]

  # Step 2: Push Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'push',
        'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}'
      ]

  # Step 3: Create startup script
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Creating startup script..."
        cat > startup.sh << 'EOL'
        #!/bin/bash
        apt-get update -y && apt-get install -y docker.io > /dev/null 2>&1
        systemctl enable docker
        systemctl start docker
        sleep 10
        gcloud auth configure-docker asia-south1-docker.pkg.dev --quiet
        docker pull asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}
        docker stop simple-web-app || true
        docker rm simple-web-app || true
        docker run -d --restart=always -p 8080:8080 --name simple-web-app asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}
        echo "Container deployment completed: $(date)" >> /var/log/startup-script.log
        EOL
        chmod +x startup.sh

  # Step 4: Blue-Green Deployment
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-bluegreen'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        echo "Starting blue-green deploy for ${SHORT_SHA}"
        TEMPLATE=it-${SHORT_SHA}
        GREEN_MIG=green-mig-${SHORT_SHA}
        ZONE=asia-south1-a

        echo "Creating new instance template..."
        gcloud compute instance-templates create $${TEMPLATE} \
          --metadata-from-file=startup-script=startup.sh \
          --metadata=IMAGE='asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app',IMAGE_TAG='${SHORT_SHA}' \
          --service-account='469028311605-compute@developer.gserviceaccount.com' \
          --scopes=https://www.googleapis.com/auth/cloud-platform \
          --machine-type=e2-micro

        echo "Creating new MIG..."
        gcloud compute instance-groups managed create $${GREEN_MIG} \
          --base-instance-name=web-green \
          --template=$${TEMPLATE} \
          --size=2 \
          --zone=$${ZONE}

        echo "Configuring named ports..."
        gcloud compute instance-groups set-named-ports $${GREEN_MIG} \
          --named-ports=http:8080 \
          --zone=$${ZONE}

        echo "Adding to backend service..."
        gcloud compute backend-services add-backend demo-backend \
          --instance-group=$${GREEN_MIG} \
          --instance-group-zone=$${ZONE} \
          --global

        echo "Waiting for new instances to become healthy..."
        HEALTHY=false
        for i in {1..36}; do
          STATUS=$(gcloud compute backend-services get-health demo-backend --global \
            --format="get(status.healthStatus[0].healthState)")
          echo "Health check attempt $i: $${STATUS}"
          if [[ "$${STATUS}" == "HEALTHY" ]]; then
            HEALTHY=true
            echo "✓ New instances are healthy"
            break
          fi
          sleep 5
        done

        # Only proceed with cleanup if new instances are healthy
        if [[ "$${HEALTHY}" == "true" ]]; then
          echo "Starting cleanup of old resources..."
          
          # Get all MIGs in the zone except the new one
          echo "Listing old MIGs..."
          OLD_MIGS=$(gcloud compute instance-groups managed list \
            --zones=$${ZONE} \
            --format="get(name)" | grep -v "$${GREEN_MIG}") || true

          if [[ -n "$${OLD_MIGS}" ]]; then
            echo "Found old MIGs to cleanup: $${OLD_MIGS}"
            
            # Process each old MIG
            echo "$${OLD_MIGS}" | while read -r OLD_MIG; do
              if [[ -n "$${OLD_MIG}" ]]; then
                echo "Processing cleanup for MIG: $${OLD_MIG}"
                
                # Remove from backend service
                echo "Removing $${OLD_MIG} from backend service..."
                gcloud compute backend-services remove-backend demo-backend \
                  --instance-group=$${OLD_MIG} \
                  --instance-group-zone=$${ZONE} \
                  --global --quiet || true
                
                # Delete the MIG
                echo "Deleting MIG: $${OLD_MIG}..."
                gcloud compute instance-groups managed delete $${OLD_MIG} \
                  --zone=$${ZONE} --quiet || true
                
                # Delete corresponding template
                if [[ $${OLD_MIG} == green-mig-* ]]; then
                  OLD_TEMPLATE="it-${OLD_MIG#green-mig-}"
                  echo "Deleting template: $${OLD_TEMPLATE}..."
                  gcloud compute instance-templates delete $${OLD_TEMPLATE} --quiet || true
                elif [[ $${OLD_MIG} == "node-app-template-v2" ]]; then
                  echo "Cleaning up node-app-template..."
                  gcloud compute instance-templates delete "node-app-template" --quiet || true
                fi
              fi
            done
          else
            echo "No old MIGs found for cleanup"
          fi
        else
          echo "! Warning: New instances not healthy, keeping old deployment active"
        fi

        echo "✓ Blue-green deployment completed for ${SHORT_SHA}"

images:
  - 'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}'
