options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # Step 1: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build',
        '-t',
        'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}',
        '.'
      ]

  # Step 2: Push Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'push',
        'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}'
      ]

  # Step 3: Create startup script
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Creating startup script..."
        cat > startup.sh << 'EOL'
        #!/bin/bash
        apt-get update -y && apt-get install -y docker.io > /dev/null 2>&1
        systemctl enable docker
        systemctl start docker
        sleep 10
        gcloud auth configure-docker asia-south1-docker.pkg.dev --quiet
        
        # Get the image tag from metadata
        IMAGE_TAG=$(curl -s "http://metadata.google.internal/computeMetadata/v1/instance/attributes/IMAGE_TAG" -H "Metadata-Flavor: Google")
        
        docker pull asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:$IMAGE_TAG
        docker stop simple-web-app || true
        docker rm simple-web-app || true
        docker run -d --restart=always -p 8080:8080 --name simple-web-app asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:$IMAGE_TAG
        echo "Container deployment completed: $(date)" >> /var/log/startup-script.log
        EOL
        chmod +x startup.sh

  # Step 4: Blue-Green Deployment
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-bluegreen'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        echo "Starting blue-green deploy for ${SHORT_SHA}"
        TEMPLATE=it-${SHORT_SHA}
        GREEN_MIG=green-mig-${SHORT_SHA}
        ZONE=asia-south1-a

        # Get current active MIG
        BLUE_MIG=$(gcloud compute instance-groups managed list \
          --zones=$${ZONE} \
          --format="get(name)" \
          --filter="name:green-mig-*" | head -n 1) || true
        echo "Current active MIG: $${BLUE_MIG}"

        echo "Creating new instance template..."
        gcloud compute instance-templates create $${TEMPLATE} \
          --metadata-from-file=startup-script=startup.sh \
          --metadata=IMAGE_TAG='${SHORT_SHA}' \
          --service-account='469028311605-compute@developer.gserviceaccount.com' \
          --scopes=https://www.googleapis.com/auth/cloud-platform \
          --machine-type=e2-micro \
          --tags=http-server

        echo "Creating new MIG..."
        gcloud compute instance-groups managed create $${GREEN_MIG} \
          --base-instance-name=web-green \
          --template=$${TEMPLATE} \
          --size=2 \
          --zone=$${ZONE}

        echo "Configuring named ports..."
        gcloud compute instance-groups set-named-ports $${GREEN_MIG} \
          --named-ports=http:8080 \
          --zone=$${ZONE}

        # Wait for instances to be running
        echo "Waiting for instances to be running..."
        gcloud compute instance-groups managed wait-until $${GREEN_MIG} \
          --stable \
          --zone=$${ZONE} \
          --timeout=300

        echo "Adding new MIG to backend service with initial 0% traffic..."
        gcloud compute backend-services add-backend demo-backend \
          --instance-group=$${GREEN_MIG} \
          --instance-group-zone=$${ZONE} \
          --global \
          --balancing-mode=UTILIZATION \
          --max-utilization=0.8 \
          --capacity-scaler=0.0 || true

        echo "Waiting for new instances to initialize..."
        sleep 90  # Allow instances to fully start and pass health checks

        echo "Gradually increasing traffic to new instances..."
        gcloud compute backend-services update-backend demo-backend \
          --instance-group=$${GREEN_MIG} \
          --instance-group-zone=$${ZONE} \
          --global \
          --capacity-scaler=0.5

        echo "Waiting for health checks..."
        HEALTHY=false
        for i in {1..20}; do  # 3+ minute wait
          echo "Health check attempt $i..."
          
          # Check if backend has healthy instances
          HEALTH_COUNT=$(gcloud compute backend-services get-health demo-backend --global \
            --format='value(status.healthStatus[].healthState)' | grep -c "HEALTHY" || echo "0")
          
          if [[ $${HEALTH_COUNT} -gt 0 ]]; then
            echo "✓ New instances are healthy"
            HEALTHY=true
            break
          fi
          sleep 10
        done

        if [[ "$${HEALTHY}" == "true" ]]; then
          # Increase to full traffic
          echo "Shifting 100% traffic to new instances..."
          gcloud compute backend-services update-backend demo-backend \
            --instance-group=$${GREEN_MIG} \
            --instance-group-zone=$${ZONE} \
            --global \
            --capacity-scaler=1.0

          sleep 30  # Allow traffic to stabilize
          
          if [[ -n "$${BLUE_MIG}" ]]; then
            echo "Draining connections from old MIG..."
            gcloud compute backend-services update-backend demo-backend \
              --instance-group=$${BLUE_MIG} \
              --instance-group-zone=$${ZONE} \
              --global \
              --capacity-scaler=0.0 || true

            sleep 60  # Allow connections to drain properly

            echo "Removing old MIG from backend..."
            gcloud compute backend-services remove-backend demo-backend \
              --instance-group=$${BLUE_MIG} \
              --instance-group-zone=$${ZONE} \
              --global --quiet || true

            echo "Deleting old MIG..."
            gcloud compute instance-groups managed delete $${BLUE_MIG} \
              --zone=$${ZONE} --quiet || true

            echo "Cleaning up old template..."
            OLD_TEMPLATE=$(gcloud compute instance-templates list \
              --filter="name:it-*" \
              --format="get(name)" | grep -v $${TEMPLATE} | head -n 1) || true
            if [[ -n "$${OLD_TEMPLATE}" ]]; then
              gcloud compute instance-templates delete $${OLD_TEMPLATE} --quiet || true
            fi
          fi
          
          echo "✓ Deployment completed successfully"
        else
          echo "ERROR: New instances not healthy, keeping old deployment"
          # Clean up failed deployment
          gcloud compute backend-services remove-backend demo-backend \
            --instance-group=$${GREEN_MIG} \
            --instance-group-zone=$${ZONE} \
            --global --quiet || true
          gcloud compute instance-groups managed delete $${GREEN_MIG} \
            --zone=$${ZONE} --quiet || true
          gcloud compute instance-templates delete $${TEMPLATE} --quiet || true
          exit 1
        fi

images:
  - 'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}'

timeout: '1200s'  # 20 minute timeout
