options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # Step 1: Build Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'build',
        '-t',
        'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}',
        '.'
      ]

  # Step 2: Push Docker image to Artifact Registry
  - name: 'gcr.io/cloud-builders/docker'
    args:
      [
        'push',
        'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}'
      ]

  # Step 3: Create startup script that auto-pulls image & runs it
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Creating startup script..."
        cat > startup.sh << 'EOL'
        #!/bin/bash
        set -euo pipefail
        apt-get update -y && apt-get install -y docker.io > /dev/null 2>&1
        systemctl enable docker
        systemctl start docker
        sleep 10
        gcloud auth configure-docker asia-south1-docker.pkg.dev --quiet
        docker pull asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}
        docker stop simple-web-app || true
        docker rm simple-web-app || true
        docker run -d --restart=always -p 8080:8080 --name simple-web-app \
          asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}
        echo "Container deployment completed at $(date)" >> /var/log/startup-script.log
        EOL
        chmod +x startup.sh

  # Step 4: Blue-Green Deployment with zero downtime
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'deploy-bluegreen'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        set -euo pipefail
        SHORT_SHA="${SHORT_SHA}"
        ZONE="asia-south1-a"
        TEMPLATE="it-${SHORT_SHA}"
        GREEN_MIG="green-mig-${SHORT_SHA}"

        echo "üîµ Starting blue-green deploy for commit $SHORT_SHA..."

        # Detect current active MIG (blue)
        BLUE_MIG=$(gcloud compute backend-services describe demo-backend --global \
          --format="value(backends.instanceGroup)" \
          | grep "green-mig-" | sed 's#.*/##' | head -n 1 || true)

        echo "Current active MIG: ${BLUE_MIG:-none}"

        echo "üì¶ Creating instance template..."
        gcloud compute instance-templates create $TEMPLATE \
          --metadata-from-file=startup-script=startup.sh \
          --metadata=IMAGE="asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app",IMAGE_TAG="${SHORT_SHA}" \
          --service-account="469028311605-compute@developer.gserviceaccount.com" \
          --scopes=https://www.googleapis.com/auth/cloud-platform \
          --machine-type=e2-micro

        echo "üü¢ Creating new MIG..."
        gcloud compute instance-groups managed create $GREEN_MIG \
          --base-instance-name="web-green" \
          --template=$TEMPLATE \
          --size=2 \
          --zone=$ZONE

        echo "Setting named ports..."
        gcloud compute instance-groups set-named-ports $GREEN_MIG \
          --named-ports=http:8080 \
          --zone=$ZONE

        echo "‚ûï Adding new MIG to backend with 0% traffic..."
        gcloud compute backend-services add-backend demo-backend \
          --instance-group=$GREEN_MIG \
          --instance-group-zone=$ZONE \
          --global \
          --balancing-mode=UTILIZATION \
          --max-utilization=0.8 \
          --capacity-scaler=0.0

        echo "‚è≥ Waiting for instances in new MIG to boot..."
        sleep 60

        echo "Half traffic -> New MIG..."
        gcloud compute backend-services update-backend demo-backend \
          --instance-group=$GREEN_MIG \
          --instance-group-zone=$ZONE \
          --global \
          --capacity-scaler=0.5

        echo "Checking health..."
        for i in {1..12}; do
          STATUS=$(gcloud compute backend-services get-health demo-backend --global \
            --format='get(status.healthStatus[].healthState)' || true)
          echo "Health check $i: $STATUS"
          if [[ "$STATUS" == *"HEALTHY"* ]]; then
            echo "‚úÖ New MIG is healthy"
            sleep 20
            echo "Switching 100% traffic..."
            gcloud compute backend-services update-backend demo-backend \
              --instance-group=$GREEN_MIG \
              --instance-group-zone=$ZONE \
              --global \
              --capacity-scaler=1.0
            # Drain blue MIG if exists
            if [[ -n "$BLUE_MIG" ]]; then
              echo "‚ôªÔ∏è Draining blue MIG..."
              gcloud compute backend-services update-backend demo-backend \
                --instance-group=$BLUE_MIG \
                --instance-group-zone=$ZONE \
                --global \
                --capacity-scaler=0.0 || true
              sleep 20
              echo "üóë Removing old MIG $BLUE_MIG..."
              gcloud compute backend-services remove-backend demo-backend \
                --instance-group=$BLUE_MIG \
                --instance-group-zone=$ZONE \
                --global --quiet || true
              gcloud compute instance-groups managed delete $BLUE_MIG \
                --zone=$ZONE --quiet || true
              OLD_TEMPLATE="it-${BLUE_MIG#green-mig-}"
              gcloud compute instance-templates delete $OLD_TEMPLATE --quiet || true
            fi
            echo "üéâ Zero-downtime blue-green deployment done!"
            break
          fi
          sleep 10
        done

images:
  - 'asia-south1-docker.pkg.dev/third-octagon-465311-r5/artifact-repo/simple-web-app:${SHORT_SHA}'
